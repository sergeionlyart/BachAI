#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
"""
import os
import json
import hmac
import hashlib
import requests
import time
from typing import Optional, List, Dict, Any

class CarDescriptionClient:
    """
    –ö–ª–∏–µ–Ω—Ç –¥–ª—è API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
    """
    
    def __init__(self, base_url: str, shared_key: str):
        self.base_url = base_url.rstrip('/')
        self.shared_key = shared_key
    
    def _generate_signature(self, payload: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å"""
        return hmac.new(
            self.shared_key.encode(),
            payload.encode(),
            hashlib.sha256
        ).hexdigest()
    
    def _make_request(self, method: str, endpoint: str, data: Optional[Dict[str, Any]] = None) -> requests.Response:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å"""
        url = f"{self.base_url}{endpoint}"
        
        if data:
            payload = json.dumps(data, separators=(',', ':'))
            headers = {
                "Content-Type": "application/json",
                "X-Signature": self._generate_signature(payload)
            }
            
            if method.upper() == "POST":
                return requests.post(url, data=payload, headers=headers)
        else:
            payload = ""
            headers = {"X-Signature": self._generate_signature(payload)}
            
            if method.upper() == "GET":
                return requests.get(url, headers=headers)
        
        raise ValueError(f"Unsupported method: {method}")
    
    def create_job(self, lots: List[Dict[str, Any]], languages: Optional[List[str]] = None, webhook_url: Optional[str] = None) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏–π
        
        Args:
            lots: –°–ø–∏—Å–æ–∫ –ª–æ—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            languages: –°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            webhook_url: URL –¥–ª—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
        """
        data: Dict[str, Any] = {"lots": lots}
        
        if languages:
            data["languages"] = languages
        
        if webhook_url:
            data["webhook_url"] = webhook_url
        
        response = self._make_request("POST", "/api/v1/generate", data)
        return response.json()
    
    def get_job_status(self, job_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)
        
        Args:
            job_id: ID –∑–∞–¥–∞—á–∏
        
        Returns:
            Dict: –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        response = self._make_request("GET", f"/api/v1/batch-status/{job_id}")
        return response.json()
    
    def get_simple_status(self, job_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
        
        Args:
            job_id: ID –∑–∞–¥–∞—á–∏
        
        Returns:
            Dict: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ
        """
        url = f"{self.base_url}/api/v1/jobs/{job_id}/status"
        response = requests.get(url)
        return response.json()
    
    def get_job_results(self, job_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á–∏
        
        Args:
            job_id: ID –∑–∞–¥–∞—á–∏
        
        Returns:
            Dict: –ü–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        response = self._make_request("GET", f"/api/v1/jobs/{job_id}")
        return response.json()
    
    def wait_for_completion(self, job_id: str, timeout: int = 3600, check_interval: int = 30) -> Dict:
        """
        –û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å polling
        
        Args:
            job_id: ID –∑–∞–¥–∞—á–∏
            timeout: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            check_interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á–∏
        """
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            status = self.get_simple_status(job_id)
            
            print(f"–°—Ç–∞—Ç—É—Å: {status['status']}")
            
            if status['status'] == 'completed':
                return self.get_job_results(job_id)
            elif status['status'] == 'failed':
                raise Exception(f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {status.get('error', 'Unknown error')}")
            
            time.sleep(check_interval)
        
        raise TimeoutError(f"–ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
    BASE_URL = "http://localhost:5000"
    SHARED_KEY = os.environ.get("SHARED_KEY", "your-secret-key-here")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = CarDescriptionClient(BASE_URL, SHARED_KEY)
    
    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    test_lots = [
        {
            "lot_id": "test-car-1",
            "images": [
                "https://example.com/car1-front.jpg",
                "https://example.com/car1-side.jpg"
            ]
        },
        {
            "lot_id": "test-car-2", 
            "images": [
                "https://example.com/car2-front.jpg"
            ]
        }
    ]
    
    languages = ["en", "ru", "de"]
    
    try:
        # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
        job = client.create_job(test_lots, languages)
        job_id = job["job_id"]
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {job_id}")
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞...")
        detailed_status = client.get_job_status(job_id)
        print(json.dumps(detailed_status, indent=2, ensure_ascii=False))
        
        # 3. –ü—Ä–æ—Å—Ç–æ–µ polling
        print("\n‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        try:
            results = client.wait_for_completion(job_id, timeout=300, check_interval=10)
            print("\n‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(json.dumps(results, indent=2, ensure_ascii=False))
        except TimeoutError:
            print("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–æ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()