#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ HMAC-SHA256 –ø–æ–¥–ø–∏—Å–µ–π –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import os
import sys
import json
import hmac
import hashlib
import requests

def generate_signature(payload: str, shared_key: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å –¥–ª—è payload"""
    return hmac.new(
        shared_key.encode(),
        payload.encode() if isinstance(payload, str) else payload,
        hashlib.sha256
    ).hexdigest()

def test_signature_auth(endpoint: str, payload_data: dict = None):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é"""
    shared_key = os.environ.get("SHARED_KEY")
    if not shared_key:
        print("‚ùå SHARED_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        return False
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º payload
    if payload_data:
        payload = json.dumps(payload_data, separators=(',', ':'))
    else:
        payload = ""
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = generate_signature(payload, shared_key)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    headers = {
        'Content-Type': 'application/json',
        'X-Signature': signature
    }
    
    print(f"üîë –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è: {endpoint}")
    print(f"üìù Payload: {payload}")
    print(f"üîê –ü–æ–¥–ø–∏—Å—å: {signature}")
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
    
    try:
        if payload_data:
            response = requests.post(f"http://localhost:5000{endpoint}", 
                                   data=payload, headers=headers)
        else:
            response = requests.get(f"http://localhost:5000{endpoint}", 
                                  headers=headers)
        
        print(f"üì• –û—Ç–≤–µ—Ç: {response.status_code}")
        if response.text:
            try:
                formatted = json.dumps(response.json(), indent=2, ensure_ascii=False)
                print(f"üí¨ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ:\n{formatted}")
            except:
                print(f"üí¨ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text}")
        
        return response.status_code < 400
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False

def main():
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HMAC –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 50)
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python signature_helper.py <endpoint> [payload.json]")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python signature_helper.py /api/v1/batch-status/365a09ce-5416-49b5-8471-d6aad042761c")
        print("  python signature_helper.py /api/generate")
        return
    
    endpoint = sys.argv[1]
    payload_data = None
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º payload –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if len(sys.argv) > 2:
        try:
            with open(sys.argv[2], 'r') as f:
                payload_data = json.load(f)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ payload: {e}")
            return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    success = test_signature_auth(endpoint, payload_data)
    
    if success:
        print("\n‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    print("\nüìã –ü—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã curl:")
    shared_key = os.environ.get("SHARED_KEY", "YOUR_SHARED_KEY")
    if payload_data:
        payload_str = json.dumps(payload_data, separators=(',', ':'))
        signature = generate_signature(payload_str, shared_key)
        print(f'curl -X POST "http://localhost:5000{endpoint}" \\')
        print(f'  -H "Content-Type: application/json" \\')
        print(f'  -H "X-Signature: {signature}" \\')
        print(f"  -d '{payload_str}'")
    else:
        signature = generate_signature("", shared_key)
        print(f'curl -X GET "http://localhost:5000{endpoint}" \\')
        print(f'  -H "X-Signature: {signature}"')

if __name__ == "__main__":
    main()