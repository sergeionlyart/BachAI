diff --git a/services/background_worker.py b/services/background_worker.py
index 4c67c49fb2edd7fd89e806de1802f64391a5dff9..04f0406dd96b5ced4775d1cdc64121d62baedcca 100644
--- a/services/background_worker.py
+++ b/services/background_worker.py
@@ -1,36 +1,35 @@
 import logging
 import time
 import threading
 from typing import Dict, Any
 from datetime import datetime, timedelta
 from flask import current_app
 from services.database_manager import DatabaseManager
 from services.batch_monitor import BatchMonitor
 from services.webhook_sender import WebhookSender
 from database.models import db, BatchJob
-from config import SHARED_KEY
 
 logger = logging.getLogger(__name__)
 
 class BackgroundWorker:
     """
     Background worker service for monitoring batch jobs and sending webhooks
     """
     
     def __init__(self, flask_app=None):
         self.flask_app = flask_app
         self.running = False
         self.worker_thread = None
         
         # Configuration
         self.check_interval = 30  # Check every 30 seconds
         self.max_webhook_retries = 5
         
     def start(self):
         """
         Start background worker in separate thread
         """
         if self.running:
             logger.warning("Background worker already running")
             return
         
@@ -43,51 +42,51 @@ class BackgroundWorker:
         """
         Stop background worker
         """
         if not self.running:
             return
         
         self.running = False
         if self.worker_thread:
             self.worker_thread.join(timeout=10)
         logger.info("Background worker stopped")
     
     def _worker_loop(self):
         """
         Main worker loop - monitors jobs and sends webhooks
         """
         logger.info("Background worker loop started")
         
         while self.running:
             try:
                 # Use Flask application context for database operations
                 if self.flask_app:
                     with self.flask_app.app_context():
                         # Initialize services within app context
                         db_manager = DatabaseManager(db.session)
                         batch_monitor = BatchMonitor()
-                        webhook_sender = WebhookSender(SHARED_KEY)
+                        webhook_sender = WebhookSender(db.session)
                         
                         # Monitor active batch jobs
                         self._monitor_batch_jobs(db_manager, batch_monitor)
                         
                         # Process pending webhooks
                         self._process_pending_webhooks(db_manager, webhook_sender)
                 else:
                     logger.error("Flask app not initialized, skipping background worker iteration")
                 
                 # Sleep before next iteration
                 time.sleep(self.check_interval)
                 
             except Exception as e:
                 logger.error(f"Background worker error: {str(e)}")
                 time.sleep(5)  # Short sleep on error before retrying
     
     def _monitor_batch_jobs(self, db_manager, batch_monitor):
         """
         Monitor active batch jobs and update their status
         """
         try:
             # Get active jobs from database
             active_jobs = db_manager.get_active_batch_jobs()
             
             for job in active_jobs:
