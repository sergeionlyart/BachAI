## **Краткое ТЗ для разработчика микросервиса**

**«Generation Service: описания автомобилей по ссылкам на изображения»**

---

При построении взаимодействия с платформой OpenAI Используйте строго инофрмацию в переданных файлах : BachAPI_OpenAI.md и Roasing_models.md

в данных файлах акутальное состояние правил по взаимодействию с платформой . 

**Вступление**

Микросервис генерации товарных описаний автомобилей объединяет проверку изображений, LLM-модели OpenAI Vision и Translation API в единую цепочку, позволяя автоматически создавать качественные тексты для карточек товаров. В реальном времени (sync-режим) он обрабатывает один лот до 20 фото за ≤300 с и сразу возвращает результат, что идеально для предпросмотра описания при загрузке объявления. В пакетном режиме (batch) сервис принимает до 50 000 лотов (файл до 200 МБ), генерирует англоязычные описания через o4-mini, затем параллельно переводит их на запрошенные языки с помощью gpt-4.1-mini и отправляет готовые тексты по webhook в течение 24 ч — оптимально для массового наполнения каталогов. Сервис автоматически валидирует URL-изображения, контролирует лимиты строк и объёма, подписывает запросы и ответы HMAC, и обеспечивает надёжность через retry-механику. Цель — дать клиентам инструмент для масштабной и экономичной автоматизации контент-менеджмента без ручного вмешательства.

### **1. Что делает сервис**

1. Принимает от клиента
    - список lots (1 или N) с URL‑изображениями и дополнительными полями;
    - список languages (языки, на которых нужно вернуть описание).
2. Генерирует англоязычное описание по фото через Vision‑модель **o‑series** (/v1/responses).
3. Автоматически переводит результат на остальные запрошенные языки (gpt‑4.1‑mini).
4. Возвращает ответ:
    - **sync** (1 lot) — сразу 200 OK;
    - **async / batch** (> 1 lot) — 201 Accepted + webhook после обработки.

---

### **2. Режимы и лимиты**

| **Режим** | **Когда срабатывает** | **Макс. объём** | **SLO ответа** |
| --- | --- | --- | --- |
| **Sync** | len(lots)==1 | ≤ 20 фото/lot | ≤ 300 с |
| **Batch** | len(lots)>1 | ≤ 50 000 строк JSONL≤ 200 MB файл≤ 1 MB строка | ≤ 24 ч |

Превышение любого лимита → **HTTP 400**.

---

### **3. Внешние точки**

### **3.1 Приём запроса**

POST /api/v1/generate-descriptions

```
{
  "signature": "<HMAC_SHA256(lots, shared_key)>",
  "version": "1.0.0",
  "languages": ["en", "ru", "fr"],
  "lots": [
    {
      "webhook": "https://client.app/hook",
      "lot_id": "11-12345",
      "additional_info": "...",
      "images": [
        {"url": "https://.../1.jpg"},
        {"url": "https://.../2.jpg"}
      ]
    }
  ]
}
```

**Ответы**

- 200 OK – sync‑режим, в теле готовый результат.
- 201 Accepted – batch‑режим, тело: {job_id: …}.
- 400/403/500 – ошибки формата, подписи, сервера.

### **3.2 Webhook (async)**

POST {lot.webhook}

```
{
  "signature": "<HMAC_SHA256(lots, shared_key)>",
  "version": "1.0.0",
  "lots": [
    {
      "lot_id": "11-12345",
      "descriptions": [
        {"language": "en", "damages": "<p>…</p>"},
        {"language": "ru", "damages": "<p>…</p>"}
      ],
      "missing_images": ["https://.../bad.jpg"]  // опционально
    }
  ]
}
```

Повторная доставка: 5 попыток, эксп.‑back‑off (1 s → 16 s).

---

### **4. Подпись (HMAC‑SHA256)**

```
def sign(lots: list, key: str) -> str:
    normalized = json.dumps(lots, separators=(',', ':'), sort_keys=True)
    return hmac.new(key.encode(), normalized.encode(), sha256).hexdigest()
```

*Неверная подпись* → **403 Forbidden**.

---

### **5. Проверка изображений**

- HEAD (fallback GET ≤ 32 kB) с timeout 3 s/5 s.
- Успех: HTTP 2xx, Content‑Type: image/*, Content‑Length ≤ 10 MB.
- 2 ошибки подряд → URL = unreachable.
- Если **> 30 %** фото нерабочие или нет ни одного валидного →
    
    *sync* → 400 image_unreachable; *batch* → строка → error_file.
    

---

### **6. Пайплайн обработки**

```
┌─ валидация запроса ─┐
│  • JSON schema      │
│  • подпись          │
│  • лимиты           │
└─────────┬───────────┘
          │
          ▼
┌─ проверка всех image_url ─┐
│ unreachable? mark & skip  │
└─────────┬─────────────────┘
          │
          ▼
┌─ режим? ────┐
│ lots==1 → sync
│ else    → batch
└────┬────┘
     │
     ▼
┌──────────────── Vision ─────────────┐
│ /v1/responses, model=o4‑mini        │
│ custom_id = vision:{lot_id}         │
└─────────┬───────────────────────────┘
          │
          ▼
┌──── перевод (если need) ────────────┐
│ /v1/responses, model=gpt‑4.1‑mini   │
│ one line / lang ≠ 'en'              │
│ custom_id = tr:{lot_id}:{lang}      │
└─────────┬───────────────────────────┘
          │
          ▼
┌─ агрегация результатов ─┐
│  vision + translate     │
└─────────┬───────────────┘
          │
          ▼
┌─ ответ │ webhook ─┐  (или 200 OK)
└───────────────────┘
```

---

### **7. Работа с Batch API**

- Один JSONL‑файл — одна модель.
- Формируйте файлы пачками 5‑10 k строк → быстрее completed.
- Сохраняйте custom_id → prompt локально: в output‑файле будет только ответ.
- Активно мониторьте status.
- Ограничения платформы (конфигurable env):
    - ≤ 2 одновременных batch‑job на API‑key; ≤ 10 глобально.
    - При превышении → 429 Too Many Requests + Retry‑After.

---

### **8. Запросы к OpenAI**

```
# Vision
{
  "model": "o4-mini",
  "reasoning": {"effort": "medium"},
  "input": [
    {"role": "user",
     "content": [
       {"type": "input_text",
        "text": USER_AD_WITH_WARNINGS},
       {"type": "input_image", "image_url": URL, "detail": "low"},
       ...
     ]}
  ],
  "max_tokens": 1024
}

# Translate (sys‑prompt шаблон)
System: "Translate the following text into {{lang}} only."
###
{{english_text}}
```

---

### **9. Политика ретраев OpenAI**

| **Ошибка** | **Повтор** | **Примечание** |
| --- | --- | --- |
| 5xx, 429, timeout | ≤ 5 | back‑off: 2 → 32 s ± 20 % |
| context_length… | 0/trim | пытаемся сократить prompt |
| vision_content_error | 0 | строка → error_file |
| прочие 4xx | 0 | без ретрая |

---

### **10. Константы и конфиги**

```
SHARED_KEY              – секрет для HMAC
VISION_SYSTEM_PROMPT    – в .env / config.py
MAX_LINE_BYTES  = 1_048_576   # 1 MB
MAX_FILE_BYTES  = 200_000_000 # 200 MB
MAX_LINES       = 50_000
MAX_SYNC_IMAGES = 20
MAX_IMAGE_SIZE  = 10_000_000  # 10 MB
ACTIVE_BATCH_LIMIT_KEY = 2
ACTIVE_BATCH_LIMIT_GLB = 10
RETRY_ATTEMPTS   = 5
BASE_DELAY_SEC   = 2
```

---

### **11. Что**

### **не**

### **делает сервис**

- Не скачивает / хранит изображения дольше 5 мин.
- Не отвечает за лицензии на контент — ответственность клиента.
- Не поддерживает Langchain и др. heavy wrappers.

---

**Внедрив вышеописанное, вы получите устойчивый, экономичный микросервис, полностью совместимый с Batch API и Reasoning API OpenAI, способный генерировать и локализовать описания авто в масштабе до 50 k лотов за сутки.**